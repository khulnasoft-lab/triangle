From: Arnaud Rebillout <arnaudr@kali.org>
Date: Mon, 9 Oct 2023 16:50:01 +0700
Subject: Split big multi transactions - part 1: RemoveMirror()

Forwarded: https://github.com/etix/mirrorbits/pull/148
---
 database/redis.go |  1 +
 rpc/rpc.go        | 16 +++++++++++++++-
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/database/redis.go b/database/redis.go
index dd7e342..f7b2736 100644
--- a/database/redis.go
+++ b/database/redis.go
@@ -20,6 +20,7 @@ import (
 const (
 	redisConnectionTimeout = 200 * time.Millisecond
 	redisReadWriteTimeout  = 300 * time.Second
+	RedisMultiMaxSize = 5000
 )
 
 var (
diff --git a/rpc/rpc.go b/rpc/rpc.go
index cb9d726..3097acc 100644
--- a/rpc/rpc.go
+++ b/rpc/rpc.go
@@ -535,12 +535,26 @@ func (c *CLI) RemoveMirror(ctx context.Context, in *MirrorIDRequest) (*empty.Emp
 	conn.Send("MULTI")
 
 	// Remove each FILEINFO / FILEMIRRORS
-	for _, file := range files {
+	for count, file := range files {
 		conn.Send("DEL", fmt.Sprintf("FILEINFO_%d_%s", in.ID, file))
 		conn.Send("SREM", fmt.Sprintf("FILEMIRRORS_%s", file), in.ID)
 		conn.Send("PUBLISH", database.MIRROR_FILE_UPDATE, fmt.Sprintf("%d %s", in.ID, file))
+		if count > 0 && count % database.RedisMultiMaxSize == 0 {
+			_, err = conn.Do("EXEC")
+			if err != nil {
+				return nil, errors.Wrap(err, "operation failed")
+			}
+			conn.Send("MULTI")
+		}
 	}
 
+	_, err = conn.Do("EXEC")
+	if err != nil {
+		return nil, errors.Wrap(err, "operation failed")
+	}
+
+	conn.Send("MULTI")
+
 	// Remove all other keys
 	conn.Send("DEL",
 		fmt.Sprintf("MIRROR_%d", in.ID),
