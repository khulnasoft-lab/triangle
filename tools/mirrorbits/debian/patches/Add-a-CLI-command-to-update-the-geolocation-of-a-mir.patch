From: Arnaud Rebillout <arnaudr@kali.org>
Date: Wed, 27 Sep 2023 10:56:24 +0700
Subject: Add a CLI command to update the geolocation of a mirror (fix #96)

Also provide a contrib script to make it easy to update the geolocation
of all the mirrors in one go.

Forwarded: https://github.com/etix/mirrorbits/pull/144
---
 cli/commands.go                  |  74 ++++++++++
 contrib/mirrorbits-geoupdate-all |  99 +++++++++++++
 rpc/rpc.go                       |  75 ++++++++++
 rpc/rpc.pb.go                    | 306 +++++++++++++++++++++++++--------------
 rpc/rpc.proto                    |   9 +-
 5 files changed, 457 insertions(+), 106 deletions(-)
 create mode 100755 contrib/mirrorbits-geoupdate-all

diff --git a/cli/commands.go b/cli/commands.go
index 92358ea..e151b78 100644
--- a/cli/commands.go
+++ b/cli/commands.go
@@ -103,6 +103,7 @@ func (c *cli) CmdHelp() error {
 		{"edit", "Edit a mirror"},
 		{"enable", "Enable a mirror"},
 		{"export", "Export the mirror database"},
+		{"geoupdate", "Update geolocation of a mirror"},
 		{"list", "List all mirrors"},
 		{"logs", "Print logs of a mirror"},
 		{"refresh", "Refresh the local repository"},
@@ -692,6 +693,79 @@ reopen:
 	return nil
 }
 
+func (c *cli) CmdGeoupdate(args ...string) error {
+	cmd := SubCmd("geoupdate", "[IDENTIFIER]", "Update geolocation of a mirror")
+	force := cmd.Bool("f", false, "Never prompt for confirmation")
+
+	if err := cmd.Parse(args); err != nil {
+		return nil
+	}
+	if cmd.NArg() != 1 {
+		cmd.Usage()
+		return nil
+	}
+
+	id, name := c.matchMirror(cmd.Arg(0))
+
+	// Get mirror with geolocation updated
+	client := c.GetRPC()
+	ctx, cancel := context.WithTimeout(context.Background(), defaultRPCTimeout)
+	defer cancel()
+	reply, err := client.GeoUpdateMirror(ctx, &rpc.MirrorIDRequest{
+		ID: int32(id),
+	})
+	if err != nil {
+		log.Fatal("edit error:", err)
+	}
+
+	// Print warnings if any
+	for i := 0; i < len(reply.Warnings); i++ {
+		fmt.Println(reply.Warnings[i])
+		if i == len(reply.Warnings)-1 {
+			fmt.Println("")
+		}
+	}
+
+	// Print diff if any
+	if len(reply.Diff) > 0 {
+		fmt.Println(reply.Diff)
+	} else {
+		fmt.Println("Geolocation is up to date, there is nothing to change.")
+		return nil
+	}
+
+	// Ask for confirmation
+	if *force == false {
+		fmt.Printf("Update mirror %s? [y/N]", name)
+		reader := bufio.NewReader(os.Stdin)
+		s, _ := reader.ReadString('\n')
+		switch s[0] {
+		case 'y', 'Y':
+			break
+		default:
+			return nil
+		}
+	}
+
+	// Update the mirror
+	ctx, cancel = context.WithTimeout(context.Background(), defaultRPCTimeout)
+	defer cancel()
+	reply2, err := client.UpdateMirror(ctx, reply.Mirror)
+	if err != nil {
+		log.Fatal("edit error:", err)
+	}
+
+	// The diff shouldn't have changed, but let's check
+	if reply2.Diff != reply.Diff {
+		fmt.Println("Unexpected diff, see below:")
+		fmt.Println(reply2.Diff)
+	}
+
+	fmt.Printf("Mirror '%s' updated successfully\n", name)
+
+	return nil
+}
+
 func (c *cli) CmdShow(args ...string) error {
 	cmd := SubCmd("show", "[IDENTIFIER]", "Print a mirror configuration")
 
diff --git a/contrib/mirrorbits-geoupdate-all b/contrib/mirrorbits-geoupdate-all
new file mode 100755
index 0000000..e264d6b
--- /dev/null
+++ b/contrib/mirrorbits-geoupdate-all
@@ -0,0 +1,99 @@
+#!/bin/bash
+
+# Copyright (c) 2023 Arnaud Rebillout <arnaudr@kali.org>
+# Distributed under the same license as mirrorbits.
+
+set -euo pipefail
+
+USAGE="$(basename $0) [-f [-f]] [MIRRORBITS_ARGS...]
+
+Update geolocation for all mirrors.
+
+The argument '-f' controls the exact behavior of the script:
+* no  -f: ask for confirmation for each mirror.
+* one -f: if there are only latitute and longitude changes, don't ask for
+  confirmation. Otherwise (eg. ASN, country or continent changed), either
+  1) ask for confirmation if running interactively, or
+  2) print the changes and skip this mirror - in the end the script returns
+     the special exit code 33 to signal that some mirrors were not updated.
+* two -f: update all mirrors without asking for confirmation.
+
+Arguments passed to this script (except -f) are handed over to the mirrorbits
+command, so you might want to use '-p PORT' to provide the server port.
+"
+
+FORCE=0
+
+while [ $# -gt 0 ]; do
+    case $1 in
+        -f|--force) FORCE=$((FORCE + 1)) ;;
+        -h|--help) echo "$USAGE"; exit 0 ;;
+        *) break ;;
+    esac
+    shift
+done
+
+MIRRORBITS="mirrorbits $@"
+
+# Get all the mirrors
+MIRRORS=$($MIRRORBITS list -state=false | grep -iv "^identifier\b" || :)
+MIRRORS=$(echo "$MIRRORS" | LC_ALL=C sort -u)
+
+# Iterate over the mirrors
+EXIT_STATUS=0
+NO_MIRROR_TO_UPDATE=1
+for mirror in $MIRRORS; do
+    # Ask to update mirror, but bail out. We only want to see the changes.
+    output=$(echo n | $MIRRORBITS geoupdate $mirror)
+
+    # Keep only the lines that list the changes.
+    changes=$(echo "$output" | grep "^[+-] " || :)
+
+    # No change? Keep going then.
+    if [ -z "$changes" ]; then
+        continue
+    fi
+
+    if [ $NO_MIRROR_TO_UPDATE = 0 ]; then
+        echo "------------------------------------------------"
+    fi
+
+    NO_MIRROR_TO_UPDATE=0
+        
+    echo "Updating $mirror:"
+
+    # FORCE == 0 aka. interactive. Always ask for confirmation.
+    if [ $FORCE -eq 0 ]; then
+        $MIRRORBITS geoupdate $mirror
+        continue
+    fi
+
+    # FORCE == 2 aka. just do it. Never ask for confirmation.
+    if [ $FORCE -ge 2 ]; then
+        $MIRRORBITS geoupdate -f $mirror
+        continue
+    fi
+
+    # FORCE == 1 aka. automatic but conservative.
+    # Filter out latitude and longitude changes. If there are no other
+    # changes, act without waiting for confirmation. If there are other
+    # changes, and we're running interactively, ask for confirmation.
+    # Otherwise, print a warning, and keep going. We'll return a special
+    # exit code in the end.
+    changes=$(echo "$changes" | grep -Ev "L(at|ong)itude:" || :)
+    if [ -z "$changes" ]; then
+        $MIRRORBITS geoupdate -f $mirror
+    elif [ -t 0 ]; then
+        $MIRRORBITS geoupdate $mirror
+    else
+        echo "NOT UPDATING! Changes need review, see below:"
+        echo "$output" | grep -iv "y/n" || :
+        EXIT_STATUS=33
+    fi
+done
+
+if [ $NO_MIRROR_TO_UPDATE = 1 ]; then
+    echo "No mirror to update, nothing was done."
+fi
+
+exit $EXIT_STATUS
diff --git a/rpc/rpc.go b/rpc/rpc.go
index 8a06ff4..cb9d726 100644
--- a/rpc/rpc.go
+++ b/rpc/rpc.go
@@ -234,6 +234,81 @@ func (c *CLI) MirrorInfo(ctx context.Context, in *MirrorIDRequest) (*Mirror, err
 	return rpcm, nil
 }
 
+func (c *CLI) GeoUpdateMirror(ctx context.Context, in *MirrorIDRequest) (*GeoUpdateMirrorReply, error) {
+	if in.ID <= 0 {
+		return nil, status.Error(codes.FailedPrecondition, "invalid mirror id")
+	}
+
+	conn, err := c.redis.Connect()
+	if err != nil {
+		return nil, err
+	}
+	defer conn.Close()
+
+	m, err := redis.Values(conn.Do("HGETALL", fmt.Sprintf("MIRROR_%d", in.ID)))
+	if err != nil {
+		return nil, err
+	}
+
+	var mirror mirrors.Mirror
+	err = redis.ScanStruct(m, &mirror)
+	if err != nil {
+		return nil, err
+	}
+
+	u, err := url.Parse(mirror.HttpURL)
+	if err != nil {
+		return nil, errors.Wrap(err, "can't parse http url")
+	}
+
+	reply := &GeoUpdateMirrorReply{}
+
+	ip, err := network.LookupMirrorIP(u.Host)
+	if err == network.ErrMultipleAddresses {
+		reply.Warnings = append(reply.Warnings,
+			"Warning: the hostname returned more than one address. Assuming they're sharing the same location.")
+	} else if err != nil {
+		return nil, errors.Wrap(err, "IP lookup failed")
+	}
+
+	geo := network.NewGeoIP()
+	if err := geo.LoadGeoIP(); err != nil {
+		return nil, errors.WithStack(err)
+	}
+
+	geoRec := geo.GetRecord(ip)
+	if geoRec.IsValid() {
+		original := mirror
+		mirror.Latitude = geoRec.Latitude
+		mirror.Longitude = geoRec.Longitude
+		mirror.Asnum = geoRec.ASNum
+		// We need to sanitize, as we're going to do a diff below,
+		// and the mirror fields are sanitized.
+		continent := utils.SanitizeLocationCodes(geoRec.ContinentCode)
+		country := utils.SanitizeLocationCodes(geoRec.CountryCode)
+		// ContinentCode is the easy one.
+		mirror.ContinentCode = continent
+		// CountryCodes needs special care: it might have been modified
+		// by user in order to list the countries that this mirror is
+		// expected to serve. Therefore we check if the country from
+		// the GeoIP record is included in the mirror country(ies), and
+		// if that's the case we don't touch it.
+		if !utils.IsInSlice(country, strings.Fields(mirror.CountryCodes)) {
+			mirror.CountryCodes = country
+		}
+		reply.Mirror, err = MirrorToRPC(&mirror)
+		if err != nil {
+			return nil, err
+		}
+		reply.Diff = createDiff(&original, &mirror)
+	} else {
+		reply.Warnings = append(reply.Warnings,
+			"Warning: unable to guess the geographic location of this mirror")
+	}
+
+	return reply, nil
+}
+
 func (c *CLI) AddMirror(ctx context.Context, in *Mirror) (*AddMirrorReply, error) {
 	mirror, err := MirrorFromRPC(in)
 	if err != nil {
diff --git a/rpc/rpc.pb.go b/rpc/rpc.pb.go
index 908c808..e5e8aad 100644
--- a/rpc/rpc.pb.go
+++ b/rpc/rpc.pb.go
@@ -51,7 +51,7 @@ func (x ScanMirrorRequest_Method) String() string {
 }
 
 func (ScanMirrorRequest_Method) EnumDescriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{11, 0}
+	return fileDescriptor_77a6da22d6a3feb1, []int{12, 0}
 }
 
 type VersionReply struct {
@@ -772,6 +772,61 @@ func (m *UpdateMirrorReply) GetDiff() string {
 	return ""
 }
 
+type GeoUpdateMirrorReply struct {
+	Mirror               *Mirror  `protobuf:"bytes,1,opt,name=Mirror,proto3" json:"Mirror,omitempty"`
+	Diff                 string   `protobuf:"bytes,2,opt,name=Diff,proto3" json:"Diff,omitempty"`
+	Warnings             []string `protobuf:"bytes,3,rep,name=Warnings,proto3" json:"Warnings,omitempty"`
+	XXX_NoUnkeyedLiteral struct{} `json:"-"`
+	XXX_unrecognized     []byte   `json:"-"`
+	XXX_sizecache        int32    `json:"-"`
+}
+
+func (m *GeoUpdateMirrorReply) Reset()         { *m = GeoUpdateMirrorReply{} }
+func (m *GeoUpdateMirrorReply) String() string { return proto.CompactTextString(m) }
+func (*GeoUpdateMirrorReply) ProtoMessage()    {}
+func (*GeoUpdateMirrorReply) Descriptor() ([]byte, []int) {
+	return fileDescriptor_77a6da22d6a3feb1, []int{10}
+}
+
+func (m *GeoUpdateMirrorReply) XXX_Unmarshal(b []byte) error {
+	return xxx_messageInfo_GeoUpdateMirrorReply.Unmarshal(m, b)
+}
+func (m *GeoUpdateMirrorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
+	return xxx_messageInfo_GeoUpdateMirrorReply.Marshal(b, m, deterministic)
+}
+func (m *GeoUpdateMirrorReply) XXX_Merge(src proto.Message) {
+	xxx_messageInfo_GeoUpdateMirrorReply.Merge(m, src)
+}
+func (m *GeoUpdateMirrorReply) XXX_Size() int {
+	return xxx_messageInfo_GeoUpdateMirrorReply.Size(m)
+}
+func (m *GeoUpdateMirrorReply) XXX_DiscardUnknown() {
+	xxx_messageInfo_GeoUpdateMirrorReply.DiscardUnknown(m)
+}
+
+var xxx_messageInfo_GeoUpdateMirrorReply proto.InternalMessageInfo
+
+func (m *GeoUpdateMirrorReply) GetMirror() *Mirror {
+	if m != nil {
+		return m.Mirror
+	}
+	return nil
+}
+
+func (m *GeoUpdateMirrorReply) GetDiff() string {
+	if m != nil {
+		return m.Diff
+	}
+	return ""
+}
+
+func (m *GeoUpdateMirrorReply) GetWarnings() []string {
+	if m != nil {
+		return m.Warnings
+	}
+	return nil
+}
+
 type RefreshRepositoryRequest struct {
 	Rehash               bool     `protobuf:"varint,1,opt,name=Rehash,proto3" json:"Rehash,omitempty"`
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
@@ -783,7 +838,7 @@ func (m *RefreshRepositoryRequest) Reset()         { *m = RefreshRepositoryReque
 func (m *RefreshRepositoryRequest) String() string { return proto.CompactTextString(m) }
 func (*RefreshRepositoryRequest) ProtoMessage()    {}
 func (*RefreshRepositoryRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{10}
+	return fileDescriptor_77a6da22d6a3feb1, []int{11}
 }
 
 func (m *RefreshRepositoryRequest) XXX_Unmarshal(b []byte) error {
@@ -824,7 +879,7 @@ func (m *ScanMirrorRequest) Reset()         { *m = ScanMirrorRequest{} }
 func (m *ScanMirrorRequest) String() string { return proto.CompactTextString(m) }
 func (*ScanMirrorRequest) ProtoMessage()    {}
 func (*ScanMirrorRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{11}
+	return fileDescriptor_77a6da22d6a3feb1, []int{12}
 }
 
 func (m *ScanMirrorRequest) XXX_Unmarshal(b []byte) error {
@@ -881,7 +936,7 @@ func (m *ScanMirrorReply) Reset()         { *m = ScanMirrorReply{} }
 func (m *ScanMirrorReply) String() string { return proto.CompactTextString(m) }
 func (*ScanMirrorReply) ProtoMessage()    {}
 func (*ScanMirrorReply) Descriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{12}
+	return fileDescriptor_77a6da22d6a3feb1, []int{13}
 }
 
 func (m *ScanMirrorReply) XXX_Unmarshal(b []byte) error {
@@ -950,7 +1005,7 @@ func (m *StatsFileRequest) Reset()         { *m = StatsFileRequest{} }
 func (m *StatsFileRequest) String() string { return proto.CompactTextString(m) }
 func (*StatsFileRequest) ProtoMessage()    {}
 func (*StatsFileRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{13}
+	return fileDescriptor_77a6da22d6a3feb1, []int{14}
 }
 
 func (m *StatsFileRequest) XXX_Unmarshal(b []byte) error {
@@ -1003,7 +1058,7 @@ func (m *StatsFileReply) Reset()         { *m = StatsFileReply{} }
 func (m *StatsFileReply) String() string { return proto.CompactTextString(m) }
 func (*StatsFileReply) ProtoMessage()    {}
 func (*StatsFileReply) Descriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{14}
+	return fileDescriptor_77a6da22d6a3feb1, []int{15}
 }
 
 func (m *StatsFileReply) XXX_Unmarshal(b []byte) error {
@@ -1044,7 +1099,7 @@ func (m *StatsMirrorRequest) Reset()         { *m = StatsMirrorRequest{} }
 func (m *StatsMirrorRequest) String() string { return proto.CompactTextString(m) }
 func (*StatsMirrorRequest) ProtoMessage()    {}
 func (*StatsMirrorRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{15}
+	return fileDescriptor_77a6da22d6a3feb1, []int{16}
 }
 
 func (m *StatsMirrorRequest) XXX_Unmarshal(b []byte) error {
@@ -1099,7 +1154,7 @@ func (m *StatsMirrorReply) Reset()         { *m = StatsMirrorReply{} }
 func (m *StatsMirrorReply) String() string { return proto.CompactTextString(m) }
 func (*StatsMirrorReply) ProtoMessage()    {}
 func (*StatsMirrorReply) Descriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{16}
+	return fileDescriptor_77a6da22d6a3feb1, []int{17}
 }
 
 func (m *StatsMirrorReply) XXX_Unmarshal(b []byte) error {
@@ -1153,7 +1208,7 @@ func (m *GetMirrorLogsRequest) Reset()         { *m = GetMirrorLogsRequest{} }
 func (m *GetMirrorLogsRequest) String() string { return proto.CompactTextString(m) }
 func (*GetMirrorLogsRequest) ProtoMessage()    {}
 func (*GetMirrorLogsRequest) Descriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{17}
+	return fileDescriptor_77a6da22d6a3feb1, []int{18}
 }
 
 func (m *GetMirrorLogsRequest) XXX_Unmarshal(b []byte) error {
@@ -1199,7 +1254,7 @@ func (m *GetMirrorLogsReply) Reset()         { *m = GetMirrorLogsReply{} }
 func (m *GetMirrorLogsReply) String() string { return proto.CompactTextString(m) }
 func (*GetMirrorLogsReply) ProtoMessage()    {}
 func (*GetMirrorLogsReply) Descriptor() ([]byte, []int) {
-	return fileDescriptor_77a6da22d6a3feb1, []int{18}
+	return fileDescriptor_77a6da22d6a3feb1, []int{19}
 }
 
 func (m *GetMirrorLogsReply) XXX_Unmarshal(b []byte) error {
@@ -1239,6 +1294,7 @@ func init() {
 	proto.RegisterType((*MirrorIDRequest)(nil), "MirrorIDRequest")
 	proto.RegisterType((*AddMirrorReply)(nil), "AddMirrorReply")
 	proto.RegisterType((*UpdateMirrorReply)(nil), "UpdateMirrorReply")
+	proto.RegisterType((*GeoUpdateMirrorReply)(nil), "GeoUpdateMirrorReply")
 	proto.RegisterType((*RefreshRepositoryRequest)(nil), "RefreshRepositoryRequest")
 	proto.RegisterType((*ScanMirrorRequest)(nil), "ScanMirrorRequest")
 	proto.RegisterType((*ScanMirrorReply)(nil), "ScanMirrorReply")
@@ -1251,108 +1307,112 @@ func init() {
 	proto.RegisterType((*GetMirrorLogsReply)(nil), "GetMirrorLogsReply")
 }
 
-func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }
+func init() {
+	proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1)
+}
 
 var fileDescriptor_77a6da22d6a3feb1 = []byte{
-	// 1413 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x5d, 0x73, 0xdb, 0x44,
-	0x17, 0xb6, 0xec, 0xc4, 0xb1, 0x8f, 0x9d, 0xc4, 0xd9, 0xa4, 0x79, 0x55, 0xb5, 0x6f, 0xeb, 0xee,
-	0xfb, 0x51, 0x33, 0x0c, 0x2a, 0x35, 0x2d, 0x64, 0xca, 0xd7, 0x18, 0x3b, 0x49, 0x03, 0x76, 0x93,
-	0x91, 0x1b, 0x18, 0xb8, 0x53, 0xa5, 0xb5, 0xa3, 0x41, 0xd6, 0x1a, 0xed, 0xaa, 0x8d, 0x67, 0xf8,
-	0x19, 0x0c, 0x57, 0x5c, 0xc0, 0x0f, 0x60, 0x86, 0xdf, 0xc7, 0x15, 0xb3, 0x1f, 0xb2, 0x65, 0x3b,
-	0x71, 0x98, 0x5e, 0x70, 0xb7, 0xe7, 0x39, 0x67, 0xf7, 0x7c, 0xe8, 0x9c, 0x67, 0x57, 0x50, 0x8e,
-	0xc7, 0x9e, 0x3d, 0x8e, 0x29, 0xa7, 0xd6, 0x9d, 0x21, 0xa5, 0xc3, 0x90, 0x3c, 0x92, 0xd2, 0xab,
-	0x64, 0xf0, 0x88, 0x8c, 0xc6, 0x7c, 0xa2, 0x95, 0xf7, 0x17, 0x95, 0x3c, 0x18, 0x11, 0xc6, 0xdd,
-	0xd1, 0x58, 0x19, 0xe0, 0x5f, 0x0d, 0xa8, 0x7e, 0x4d, 0x62, 0x16, 0xd0, 0xc8, 0x21, 0xe3, 0x70,
-	0x82, 0x4c, 0xd8, 0xd0, 0xb2, 0x69, 0xd4, 0x8d, 0x46, 0xd9, 0x49, 0x45, 0xb4, 0x07, 0xeb, 0x5f,
-	0x24, 0x41, 0xe8, 0x9b, 0x79, 0x89, 0x2b, 0x01, 0xdd, 0x85, 0xf2, 0x31, 0x4d, 0x77, 0x14, 0xa4,
-	0x66, 0x06, 0xa0, 0x2d, 0xc8, 0x9f, 0xf6, 0xcd, 0x35, 0x09, 0xe7, 0x4f, 0xfb, 0x08, 0xc1, 0x5a,
-	0x2b, 0xf6, 0x2e, 0xcc, 0x75, 0x89, 0xc8, 0x35, 0xba, 0x07, 0x70, 0x4c, 0x7b, 0xee, 0xe5, 0x59,
-	0x4c, 0x3d, 0x66, 0x16, 0xeb, 0x46, 0x63, 0xdd, 0xc9, 0x20, 0xb8, 0x01, 0xd5, 0x9e, 0xcb, 0xbd,
-	0x0b, 0x87, 0xfc, 0x90, 0x10, 0xc6, 0x45, 0x84, 0x67, 0x2e, 0xe7, 0x24, 0x9e, 0x46, 0xa8, 0x45,
-	0xfc, 0x73, 0x09, 0x8a, 0xbd, 0x20, 0x8e, 0x69, 0x2c, 0x1c, 0x9f, 0x74, 0xa4, 0x7e, 0xdd, 0xc9,
-	0x9f, 0x74, 0x84, 0xe3, 0x17, 0xee, 0x88, 0xe8, 0xd8, 0xe5, 0x5a, 0x1c, 0xf4, 0x9c, 0xf3, 0xf1,
-	0xb9, 0xd3, 0xd5, 0x81, 0xa7, 0x22, 0xb2, 0xa0, 0xe4, 0xb0, 0x49, 0xe4, 0x09, 0x95, 0x0a, 0x7e,
-	0x2a, 0xa3, 0x7d, 0x28, 0x1e, 0xa9, 0x4d, 0x2a, 0x09, 0x2d, 0xa1, 0x3a, 0x54, 0xfa, 0x63, 0x1a,
-	0x31, 0x1a, 0x4b, 0x47, 0x45, 0xa9, 0xcc, 0x42, 0x22, 0x51, 0x2d, 0x8a, 0xdd, 0x1b, 0xd2, 0x20,
-	0x83, 0xa0, 0xff, 0xc3, 0x96, 0x96, 0xba, 0x74, 0x48, 0x85, 0x4d, 0x49, 0xda, 0x2c, 0xa0, 0xa2,
-	0xe4, 0x2d, 0x7f, 0x14, 0x44, 0xd2, 0x4f, 0x59, 0x95, 0x7c, 0x0a, 0x08, 0x2f, 0x52, 0x38, 0x1c,
-	0xb9, 0x41, 0x68, 0x82, 0xf2, 0x32, 0x43, 0x84, 0xbe, 0x9d, 0x30, 0x4e, 0x47, 0x1d, 0x97, 0xbb,
-	0x66, 0x45, 0xe9, 0x67, 0x08, 0xfa, 0x2f, 0x6c, 0xb6, 0x69, 0xc4, 0x83, 0x88, 0x44, 0xfc, 0x34,
-	0x0a, 0x27, 0x66, 0xb5, 0x6e, 0x34, 0x4a, 0xce, 0x3c, 0x28, 0xb2, 0x6d, 0xd3, 0x24, 0xe2, 0xf1,
-	0x44, 0xda, 0x6c, 0x4a, 0x9b, 0x2c, 0x24, 0xea, 0xd4, 0xea, 0x4b, 0xe5, 0x96, 0x54, 0x6a, 0x49,
-	0xb4, 0x51, 0xdf, 0xa3, 0x31, 0x31, 0xb7, 0xe5, 0xc7, 0x51, 0x82, 0xa8, 0x78, 0xd7, 0xe5, 0x01,
-	0x4f, 0x7c, 0x62, 0xd6, 0xea, 0x46, 0x23, 0xef, 0x4c, 0x65, 0x91, 0x6f, 0x97, 0x46, 0x43, 0xa5,
-	0xdc, 0x91, 0xca, 0x19, 0x30, 0x17, 0x6f, 0x9b, 0xfa, 0xc4, 0x44, 0x32, 0xa5, 0x79, 0x10, 0x61,
-	0xa8, 0xea, 0xe0, 0x84, 0xc8, 0xcc, 0x5d, 0x69, 0x34, 0x87, 0xa1, 0x26, 0xec, 0x1d, 0x5e, 0x7a,
-	0x61, 0xe2, 0x13, 0x7f, 0xce, 0x76, 0x4f, 0xda, 0x5e, 0xa9, 0x13, 0xd9, 0xb4, 0x58, 0x94, 0x8c,
-	0xcc, 0x5b, 0x75, 0xa3, 0xb1, 0xe9, 0x28, 0x41, 0x74, 0x56, 0x9b, 0x8e, 0x46, 0x24, 0xe2, 0xe6,
-	0xbe, 0xea, 0x2c, 0x2d, 0x0a, 0xcd, 0x61, 0xe4, 0xbe, 0x0a, 0x89, 0x6f, 0xfe, 0x4b, 0x96, 0x25,
-	0x15, 0x45, 0xc7, 0x9e, 0x8f, 0x4d, 0x53, 0x82, 0xf9, 0xf3, 0xb1, 0xc8, 0x4b, 0x7b, 0x74, 0x88,
-	0xcb, 0x68, 0x64, 0xde, 0x56, 0x79, 0xcd, 0x81, 0xe8, 0x19, 0x40, 0x9f, 0xbb, 0x9c, 0xf4, 0x83,
-	0xc8, 0x23, 0xa6, 0x55, 0x37, 0x1a, 0x95, 0xa6, 0x65, 0xab, 0xa9, 0xb7, 0xd3, 0xa9, 0xb7, 0x5f,
-	0xa6, 0x53, 0xef, 0x64, 0xac, 0x45, 0xbf, 0xb5, 0xc2, 0x90, 0xbe, 0x71, 0x88, 0x1f, 0xc4, 0xc4,
-	0xe3, 0xcc, 0xbc, 0x23, 0x3f, 0xc9, 0x02, 0x8a, 0x3e, 0x14, 0xdf, 0x86, 0xf1, 0xfe, 0x24, 0xf2,
-	0xcc, 0xbb, 0x37, 0x7a, 0x98, 0xda, 0xa2, 0x2f, 0x01, 0xc9, 0x75, 0xe2, 0x79, 0x84, 0xb1, 0x41,
-	0x12, 0xca, 0x13, 0xfe, 0x7d, 0xe3, 0x09, 0x57, 0xec, 0x42, 0x9f, 0x40, 0x45, 0xa0, 0x3d, 0xea,
-	0x0b, 0x3b, 0xf3, 0xde, 0x8d, 0x87, 0x64, 0xcd, 0xf1, 0x13, 0xd8, 0x56, 0xbc, 0xd0, 0x0d, 0x18,
-	0x57, 0x3c, 0xf7, 0x00, 0x36, 0x14, 0xc4, 0x4c, 0xa3, 0x5e, 0x68, 0x54, 0x9a, 0x1b, 0xb6, 0x92,
-	0x9d, 0x14, 0xc7, 0x36, 0x94, 0xd4, 0xf2, 0xa4, 0xf3, 0x77, 0xf8, 0x04, 0x3f, 0x06, 0xd0, 0x44,
-	0x25, 0x1c, 0xfc, 0x67, 0xd1, 0x41, 0xd9, 0x4e, 0x4f, 0x9b, 0xb9, 0xf8, 0x1c, 0x76, 0xdb, 0x17,
-	0x6e, 0x34, 0x24, 0xe2, 0xb3, 0x24, 0x2c, 0xa5, 0xb8, 0x45, 0x6f, 0x99, 0xae, 0xc9, 0xcf, 0x75,
-	0x0d, 0x7e, 0x90, 0x66, 0x76, 0xd2, 0xb9, 0x66, 0x33, 0xfe, 0xc3, 0x80, 0xad, 0x96, 0xef, 0xeb,
-	0xec, 0x64, 0x6c, 0xd9, 0x69, 0x33, 0x56, 0x4d, 0x5b, 0x7e, 0x71, 0xda, 0x64, 0x67, 0xcb, 0xfe,
-	0x4f, 0x39, 0x53, 0x8b, 0x62, 0xdf, 0x74, 0xe4, 0x34, 0x69, 0xce, 0x00, 0x54, 0x83, 0x42, 0xab,
-	0xff, 0x42, 0x53, 0xa6, 0x58, 0x8a, 0x18, 0xbe, 0x71, 0xe3, 0x28, 0x88, 0x86, 0x82, 0xf4, 0x0b,
-	0x82, 0x63, 0x53, 0x19, 0x3f, 0x84, 0x9d, 0xf3, 0xb1, 0xef, 0x72, 0x92, 0x0d, 0x1a, 0xc1, 0x5a,
-	0x27, 0x18, 0x0c, 0x34, 0xe9, 0xcb, 0x35, 0x6e, 0x82, 0xe9, 0x90, 0x41, 0x4c, 0x98, 0x28, 0x3a,
-	0x65, 0x01, 0xa7, 0xf1, 0x24, 0xad, 0xc3, 0x3e, 0x14, 0x1d, 0x72, 0xe1, 0xb2, 0x0b, 0xb9, 0xa3,
-	0xe4, 0x68, 0x09, 0xff, 0x66, 0xc0, 0x4e, 0xdf, 0x73, 0xa3, 0xf4, 0xec, 0xab, 0x4b, 0x2e, 0x68,
-	0x34, 0xe1, 0x54, 0xd5, 0x59, 0x57, 0x3d, 0x83, 0xa0, 0xa7, 0x50, 0x3a, 0x13, 0x5d, 0xe7, 0xd1,
-	0x50, 0x56, 0x62, 0xab, 0x79, 0xdb, 0x5e, 0x3a, 0xd5, 0xee, 0x11, 0x7e, 0x41, 0x7d, 0x67, 0x6a,
-	0x8a, 0xff, 0x07, 0x45, 0x85, 0xa1, 0x0d, 0x28, 0xb4, 0xba, 0xdd, 0x5a, 0x4e, 0x2c, 0x8e, 0x5e,
-	0x9e, 0xd5, 0x0c, 0x54, 0x86, 0x75, 0xa7, 0xff, 0xed, 0x8b, 0x76, 0x2d, 0x8f, 0x7f, 0x37, 0x60,
-	0x3b, 0x7b, 0x9a, 0xbe, 0x99, 0xd3, 0x26, 0x30, 0xe6, 0xa9, 0x03, 0x43, 0xf5, 0x28, 0x08, 0x09,
-	0x3b, 0x89, 0x7c, 0x72, 0xa9, 0x7b, 0xa4, 0xe0, 0xcc, 0x61, 0xc2, 0xe6, 0xab, 0x88, 0xbe, 0x89,
-	0x52, 0x9b, 0x82, 0xb2, 0xc9, 0x62, 0xc2, 0x83, 0x43, 0x46, 0xf4, 0x35, 0xf1, 0xe5, 0x07, 0x2c,
-	0x38, 0xa9, 0x28, 0xaa, 0xf1, 0xf2, 0xbb, 0xd3, 0xc1, 0x80, 0x11, 0xde, 0x63, 0xf2, 0x2b, 0x16,
-	0x9c, 0x0c, 0x82, 0x7f, 0x31, 0xa0, 0x26, 0x5a, 0x98, 0x09, 0x9f, 0x37, 0x5e, 0xd4, 0xe8, 0x00,
-	0xca, 0x1d, 0x41, 0x43, 0xdc, 0x8d, 0xb9, 0x8c, 0x76, 0xf5, 0x2c, 0xcf, 0x8c, 0xd1, 0x13, 0xd8,
-	0x10, 0xc2, 0x61, 0xa4, 0x32, 0x58, 0xbd, 0x2f, 0x35, 0xc5, 0x3f, 0xc2, 0x56, 0x26, 0x3a, 0x51,
-	0xcc, 0xf7, 0x61, 0x7d, 0x20, 0xca, 0xa3, 0x67, 0xd3, 0xb2, 0xe7, 0xf5, 0xb6, 0xac, 0xdd, 0xa1,
-	0x68, 0x6c, 0x47, 0x19, 0x5a, 0x07, 0x00, 0x33, 0x50, 0xf4, 0xf3, 0xf7, 0x64, 0xa2, 0xf3, 0x12,
-	0x4b, 0x71, 0x13, 0xbc, 0x76, 0xc3, 0x84, 0xe8, 0xea, 0x2b, 0xe1, 0x59, 0xfe, 0xc0, 0xc0, 0x3f,
-	0x19, 0x80, 0xe4, 0xf1, 0xab, 0x3b, 0xee, 0x9f, 0x2e, 0x0a, 0xd1, 0x9f, 0x2c, 0xdb, 0x63, 0xf7,
-	0xd3, 0x07, 0x94, 0x8c, 0x2b, 0x43, 0x8a, 0xe9, 0xbb, 0x4a, 0xbc, 0x8c, 0x54, 0xfc, 0x4c, 0x27,
-	0x3a, 0x95, 0xe5, 0x03, 0x71, 0xc2, 0x09, 0xd3, 0xbd, 0xa5, 0x04, 0x7c, 0x04, 0x7b, 0xc7, 0x84,
-	0x6b, 0xfa, 0xa5, 0x43, 0xb6, 0x62, 0xe0, 0x7a, 0xee, 0xa5, 0x43, 0x58, 0x12, 0xea, 0xb3, 0xd7,
-	0x9d, 0x0c, 0x82, 0x1b, 0x80, 0x16, 0xce, 0xd1, 0xa4, 0x10, 0x06, 0x11, 0x91, 0x9f, 0xb1, 0xec,
-	0xc8, 0x75, 0xf3, 0xcf, 0x22, 0x14, 0xda, 0xdd, 0x13, 0xf4, 0x14, 0xe0, 0x98, 0xf0, 0xf4, 0x29,
-	0xba, 0xbf, 0x54, 0x93, 0x43, 0xf1, 0x50, 0xb6, 0x36, 0xed, 0xec, 0xfb, 0x17, 0xe7, 0xd0, 0xc7,
-	0xb0, 0x71, 0x3e, 0x1e, 0xc6, 0xae, 0x4f, 0xae, 0xdd, 0x73, 0x0d, 0x8e, 0x73, 0xe8, 0x99, 0x20,
-	0x9d, 0x90, 0xba, 0xfe, 0x5b, 0xec, 0xfd, 0x0c, 0xaa, 0xd9, 0xcb, 0x00, 0xed, 0xd9, 0x57, 0xdc,
-	0x0d, 0x2b, 0xf6, 0x37, 0x61, 0x4d, 0xdc, 0x6f, 0xd7, 0x7a, 0xae, 0xd9, 0x0b, 0x97, 0x20, 0xce,
-	0xa1, 0x77, 0x00, 0xf4, 0xfd, 0x11, 0x0d, 0x28, 0xaa, 0xd9, 0x0b, 0x97, 0x89, 0x95, 0x36, 0x00,
-	0xce, 0xa1, 0x87, 0xe2, 0xd9, 0xa9, 0xaf, 0x11, 0x94, 0xe2, 0xd6, 0xb6, 0x3d, 0x7f, 0xb7, 0xe0,
-	0x1c, 0x7a, 0x0f, 0xaa, 0x59, 0xf6, 0x9e, 0xd9, 0x22, 0x7b, 0x89, 0xd5, 0x65, 0xc9, 0xaa, 0x8a,
-	0x66, 0xb4, 0xf9, 0x72, 0x10, 0xd7, 0xa7, 0xfc, 0x1c, 0x76, 0x96, 0xf8, 0x1f, 0xdd, 0xb6, 0xaf,
-	0xbb, 0x13, 0x56, 0x9c, 0xf4, 0x04, 0x60, 0x46, 0xb8, 0x08, 0x2d, 0x73, 0xb9, 0x55, 0xb3, 0x17,
-	0x18, 0x19, 0xe7, 0xd0, 0x63, 0x28, 0x4f, 0x89, 0x03, 0xed, 0xd8, 0x8b, 0x14, 0x68, 0x6d, 0x2f,
-	0xf0, 0x0a, 0xce, 0xa1, 0x8f, 0xa0, 0x92, 0x19, 0x3b, 0xb4, 0x6b, 0x2f, 0x53, 0x83, 0xb5, 0x63,
-	0x2f, 0x4e, 0x26, 0xce, 0xa1, 0x03, 0x58, 0x3b, 0x0b, 0xa2, 0xe1, 0x5b, 0x34, 0xd6, 0xa7, 0xb0,
-	0x39, 0x37, 0x3a, 0xe8, 0x96, 0x7d, 0xd5, 0x48, 0x5a, 0xbb, 0xf6, 0xf2, 0x84, 0xe1, 0x1c, 0x7a,
-	0x17, 0x2a, 0xf2, 0x5d, 0xa3, 0x23, 0xde, 0xb4, 0xb3, 0xbf, 0x63, 0x56, 0xc5, 0x9e, 0x3d, 0x7a,
-	0x70, 0xee, 0x55, 0x51, 0x7a, 0xff, 0xe0, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0xff, 0xff,
-	0x89, 0xa2, 0x0e, 0x00, 0x00,
+	// 1445 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4d, 0x73, 0x1b, 0x45,
+	0x13, 0xd6, 0x4a, 0xb6, 0x65, 0xb5, 0x64, 0x5b, 0x1e, 0x3b, 0x7e, 0x37, 0x4a, 0xde, 0x44, 0x19,
+	0x3e, 0x22, 0x8a, 0x62, 0x43, 0x4c, 0x02, 0xae, 0x10, 0xa0, 0x84, 0xfc, 0x11, 0x83, 0x1c, 0xbb,
+	0x56, 0x31, 0x14, 0xdc, 0x36, 0xda, 0x91, 0xbc, 0xc5, 0x6a, 0x47, 0xec, 0x8c, 0x12, 0xab, 0x8a,
+	0x9f, 0x41, 0x71, 0xe2, 0x00, 0x3f, 0x80, 0x2a, 0x8e, 0xfc, 0x3c, 0xaa, 0x67, 0x66, 0xa5, 0xd5,
+	0xca, 0x1f, 0x90, 0x03, 0xb7, 0xed, 0xa7, 0x7b, 0xa6, 0x7b, 0x7a, 0xba, 0x9f, 0x9e, 0x85, 0x52,
+	0x3c, 0xec, 0x3a, 0xc3, 0x98, 0x4b, 0x5e, 0xbb, 0xd5, 0xe7, 0xbc, 0x1f, 0xb2, 0x07, 0x4a, 0x7a,
+	0x39, 0xea, 0x3d, 0x60, 0x83, 0xa1, 0x1c, 0x1b, 0xe5, 0xdd, 0xac, 0x52, 0x06, 0x03, 0x26, 0xa4,
+	0x37, 0x18, 0x6a, 0x03, 0xfa, 0x9b, 0x05, 0x95, 0x6f, 0x58, 0x2c, 0x02, 0x1e, 0xb9, 0x6c, 0x18,
+	0x8e, 0x89, 0x0d, 0x45, 0x23, 0xdb, 0x56, 0xdd, 0x6a, 0x94, 0xdc, 0x44, 0x24, 0x9b, 0xb0, 0xf8,
+	0xe5, 0x28, 0x08, 0x7d, 0x3b, 0xaf, 0x70, 0x2d, 0x90, 0xdb, 0x50, 0x3a, 0xe0, 0xc9, 0x8a, 0x82,
+	0xd2, 0x4c, 0x01, 0xb2, 0x0a, 0xf9, 0xe3, 0x8e, 0xbd, 0xa0, 0xe0, 0xfc, 0x71, 0x87, 0x10, 0x58,
+	0x68, 0xc6, 0xdd, 0x33, 0x7b, 0x51, 0x21, 0xea, 0x9b, 0xdc, 0x01, 0x38, 0xe0, 0x47, 0xde, 0xf9,
+	0x49, 0xcc, 0xbb, 0xc2, 0x5e, 0xaa, 0x5b, 0x8d, 0x45, 0x37, 0x85, 0xd0, 0x06, 0x54, 0x8e, 0x3c,
+	0xd9, 0x3d, 0x73, 0xd9, 0x8f, 0x23, 0x26, 0x24, 0x46, 0x78, 0xe2, 0x49, 0xc9, 0xe2, 0x49, 0x84,
+	0x46, 0xa4, 0xbf, 0x2c, 0xc3, 0xd2, 0x51, 0x10, 0xc7, 0x3c, 0x46, 0xc7, 0x87, 0xbb, 0x4a, 0xbf,
+	0xe8, 0xe6, 0x0f, 0x77, 0xd1, 0xf1, 0x73, 0x6f, 0xc0, 0x4c, 0xec, 0xea, 0x1b, 0x37, 0x7a, 0x26,
+	0xe5, 0xf0, 0xd4, 0x6d, 0x9b, 0xc0, 0x13, 0x91, 0xd4, 0x60, 0xd9, 0x15, 0xe3, 0xa8, 0x8b, 0x2a,
+	0x1d, 0xfc, 0x44, 0x26, 0x5b, 0xb0, 0xb4, 0xaf, 0x17, 0xe9, 0x43, 0x18, 0x89, 0xd4, 0xa1, 0xdc,
+	0x19, 0xf2, 0x48, 0xf0, 0x58, 0x39, 0x5a, 0x52, 0xca, 0x34, 0x84, 0x07, 0x35, 0x22, 0xae, 0x2e,
+	0x2a, 0x83, 0x14, 0x42, 0xde, 0x85, 0x55, 0x23, 0xb5, 0x79, 0x9f, 0xa3, 0xcd, 0xb2, 0xb2, 0xc9,
+	0xa0, 0x98, 0xf2, 0xa6, 0x3f, 0x08, 0x22, 0xe5, 0xa7, 0xa4, 0x53, 0x3e, 0x01, 0xd0, 0x8b, 0x12,
+	0xf6, 0x06, 0x5e, 0x10, 0xda, 0xa0, 0xbd, 0x4c, 0x11, 0xd4, 0xb7, 0x46, 0x42, 0xf2, 0xc1, 0xae,
+	0x27, 0x3d, 0xbb, 0xac, 0xf5, 0x53, 0x84, 0xbc, 0x0d, 0x2b, 0x2d, 0x1e, 0xc9, 0x20, 0x62, 0x91,
+	0x3c, 0x8e, 0xc2, 0xb1, 0x5d, 0xa9, 0x5b, 0x8d, 0x65, 0x77, 0x16, 0xc4, 0xd3, 0xb6, 0xf8, 0x28,
+	0x92, 0xf1, 0x58, 0xd9, 0xac, 0x28, 0x9b, 0x34, 0x84, 0x79, 0x6a, 0x76, 0x94, 0x72, 0x55, 0x29,
+	0x8d, 0x84, 0x65, 0xd4, 0xe9, 0xf2, 0x98, 0xd9, 0x6b, 0xea, 0x72, 0xb4, 0x80, 0x19, 0x6f, 0x7b,
+	0x32, 0x90, 0x23, 0x9f, 0xd9, 0xd5, 0xba, 0xd5, 0xc8, 0xbb, 0x13, 0x19, 0xcf, 0xdb, 0xe6, 0x51,
+	0x5f, 0x2b, 0xd7, 0x95, 0x72, 0x0a, 0xcc, 0xc4, 0xdb, 0xe2, 0x3e, 0xb3, 0x89, 0x3a, 0xd2, 0x2c,
+	0x48, 0x28, 0x54, 0x4c, 0x70, 0x28, 0x0a, 0x7b, 0x43, 0x19, 0xcd, 0x60, 0x64, 0x1b, 0x36, 0xf7,
+	0xce, 0xbb, 0xe1, 0xc8, 0x67, 0xfe, 0x8c, 0xed, 0xa6, 0xb2, 0xbd, 0x50, 0x87, 0xa7, 0x69, 0x8a,
+	0x68, 0x34, 0xb0, 0x6f, 0xd4, 0xad, 0xc6, 0x8a, 0xab, 0x05, 0xac, 0xac, 0x16, 0x1f, 0x0c, 0x58,
+	0x24, 0xed, 0x2d, 0x5d, 0x59, 0x46, 0x44, 0xcd, 0x5e, 0xe4, 0xbd, 0x0c, 0x99, 0x6f, 0xff, 0x4f,
+	0xa5, 0x25, 0x11, 0xb1, 0x62, 0x4f, 0x87, 0xb6, 0xad, 0xc0, 0xfc, 0xe9, 0x10, 0xcf, 0x65, 0x3c,
+	0xba, 0xcc, 0x13, 0x3c, 0xb2, 0x6f, 0xea, 0x73, 0xcd, 0x80, 0xe4, 0x09, 0x40, 0x47, 0x7a, 0x92,
+	0x75, 0x82, 0xa8, 0xcb, 0xec, 0x5a, 0xdd, 0x6a, 0x94, 0xb7, 0x6b, 0x8e, 0xee, 0x7a, 0x27, 0xe9,
+	0x7a, 0xe7, 0x45, 0xd2, 0xf5, 0x6e, 0xca, 0x1a, 0xeb, 0xad, 0x19, 0x86, 0xfc, 0xb5, 0xcb, 0xfc,
+	0x20, 0x66, 0x5d, 0x29, 0xec, 0x5b, 0xea, 0x4a, 0x32, 0x28, 0xf9, 0x18, 0xef, 0x46, 0xc8, 0xce,
+	0x38, 0xea, 0xda, 0xb7, 0xaf, 0xf5, 0x30, 0xb1, 0x25, 0x5f, 0x01, 0x51, 0xdf, 0xa3, 0x6e, 0x97,
+	0x09, 0xd1, 0x1b, 0x85, 0x6a, 0x87, 0xff, 0x5f, 0xbb, 0xc3, 0x05, 0xab, 0xc8, 0x53, 0x28, 0x23,
+	0x7a, 0xc4, 0x7d, 0xb4, 0xb3, 0xef, 0x5c, 0xbb, 0x49, 0xda, 0x9c, 0x3e, 0x82, 0x35, 0xcd, 0x0b,
+	0xed, 0x40, 0x48, 0xcd, 0x73, 0xf7, 0xa0, 0xa8, 0x21, 0x61, 0x5b, 0xf5, 0x42, 0xa3, 0xbc, 0x5d,
+	0x74, 0xb4, 0xec, 0x26, 0x38, 0x75, 0x60, 0x59, 0x7f, 0x1e, 0xee, 0xfe, 0x13, 0x3e, 0xa1, 0x0f,
+	0x01, 0x0c, 0x51, 0xa1, 0x83, 0xb7, 0xb2, 0x0e, 0x4a, 0x4e, 0xb2, 0xdb, 0xd4, 0xc5, 0x17, 0xb0,
+	0xd1, 0x3a, 0xf3, 0xa2, 0x3e, 0xc3, 0x6b, 0x19, 0x89, 0x84, 0xe2, 0xb2, 0xde, 0x52, 0x55, 0x93,
+	0x9f, 0xa9, 0x1a, 0x7a, 0x2f, 0x39, 0xd9, 0xe1, 0xee, 0x25, 0x8b, 0xe9, 0x9f, 0x16, 0xac, 0x36,
+	0x7d, 0xdf, 0x9c, 0x4e, 0xc5, 0x96, 0xee, 0x36, 0xeb, 0xaa, 0x6e, 0xcb, 0x67, 0xbb, 0x4d, 0x55,
+	0xb6, 0xaa, 0xff, 0x84, 0x33, 0x8d, 0x88, 0xeb, 0x26, 0x2d, 0x67, 0x48, 0x73, 0x0a, 0x90, 0x2a,
+	0x14, 0x9a, 0x9d, 0xe7, 0x86, 0x32, 0xf1, 0x13, 0x63, 0xf8, 0xd6, 0x8b, 0xa3, 0x20, 0xea, 0x23,
+	0xe9, 0x17, 0x90, 0x63, 0x13, 0x99, 0xde, 0x87, 0xf5, 0xd3, 0xa1, 0xef, 0x49, 0x96, 0x0e, 0x9a,
+	0xc0, 0xc2, 0x6e, 0xd0, 0xeb, 0x19, 0xd2, 0x57, 0xdf, 0xb4, 0x0f, 0x9b, 0x07, 0x8c, 0xcf, 0xdb,
+	0xde, 0x4d, 0x06, 0x81, 0xb2, 0x4e, 0x5d, 0x6e, 0x32, 0x1f, 0x92, 0xcd, 0xf2, 0xd3, 0xcd, 0x66,
+	0x22, 0x2a, 0x64, 0x22, 0xda, 0x06, 0xdb, 0x65, 0xbd, 0x98, 0x09, 0xbc, 0x5d, 0x2e, 0x02, 0xc9,
+	0xe3, 0x71, 0x92, 0xf0, 0x2d, 0x58, 0x72, 0xd9, 0x99, 0x27, 0xce, 0x94, 0xb3, 0x65, 0xd7, 0x48,
+	0xf4, 0x77, 0x0b, 0xd6, 0x3b, 0x5d, 0x2f, 0x4a, 0x02, 0xbb, 0xf8, 0x6e, 0x91, 0xaf, 0x47, 0x92,
+	0xeb, 0x0b, 0x35, 0xd7, 0x9b, 0x42, 0xc8, 0x63, 0x58, 0x3e, 0xc1, 0xf2, 0xee, 0xf2, 0x50, 0xa5,
+	0x7c, 0x75, 0xfb, 0xa6, 0x33, 0xb7, 0xab, 0x73, 0xc4, 0xe4, 0x19, 0xf7, 0xdd, 0x89, 0x29, 0x7d,
+	0x07, 0x96, 0x34, 0x46, 0x8a, 0x50, 0x68, 0xb6, 0xdb, 0xd5, 0x1c, 0x7e, 0xec, 0xbf, 0x38, 0xa9,
+	0x5a, 0xa4, 0x04, 0x8b, 0x6e, 0xe7, 0xbb, 0xe7, 0xad, 0x6a, 0x9e, 0xfe, 0x61, 0xc1, 0x5a, 0x7a,
+	0x37, 0xf3, 0x04, 0x48, 0xaa, 0xcd, 0x9a, 0xe5, 0x28, 0x0a, 0x95, 0xfd, 0x20, 0x64, 0xe2, 0x30,
+	0xf2, 0xd9, 0xb9, 0x29, 0xc6, 0x82, 0x3b, 0x83, 0xa1, 0xcd, 0xd7, 0x11, 0x7f, 0x1d, 0x25, 0x36,
+	0x05, 0x6d, 0x93, 0xc6, 0xd0, 0x83, 0xcb, 0x06, 0xfc, 0x15, 0xf3, 0x55, 0xa5, 0x14, 0xdc, 0x44,
+	0xc4, 0x6c, 0xbc, 0xf8, 0xfe, 0xb8, 0xd7, 0x13, 0x4c, 0x1e, 0x09, 0x55, 0x2e, 0x05, 0x37, 0x85,
+	0xd0, 0x5f, 0x2d, 0xa8, 0x62, 0xaf, 0x08, 0xf4, 0x79, 0xed, 0x8b, 0x80, 0xec, 0x40, 0x69, 0x17,
+	0xf9, 0x4e, 0x7a, 0xb1, 0x54, 0xd1, 0x5e, 0x4d, 0x1a, 0x53, 0x63, 0xf2, 0x08, 0x8a, 0x28, 0xec,
+	0x45, 0xfa, 0x04, 0x57, 0xaf, 0x4b, 0x4c, 0xe9, 0x4f, 0xb0, 0x9a, 0x8a, 0x0e, 0x93, 0xf9, 0x21,
+	0x2c, 0xf6, 0x30, 0x3d, 0x86, 0x04, 0x6a, 0xce, 0xac, 0xde, 0x51, 0xb9, 0xdb, 0xc3, 0x0e, 0x72,
+	0xb5, 0x61, 0x6d, 0x07, 0x60, 0x0a, 0x62, 0xe3, 0xfc, 0xc0, 0xc6, 0xe6, 0x5c, 0xf8, 0x89, 0x23,
+	0xe7, 0x95, 0x17, 0x8e, 0x98, 0xc9, 0xbe, 0x16, 0x9e, 0xe4, 0x77, 0x2c, 0xfa, 0xb3, 0x05, 0x44,
+	0x6d, 0x7f, 0x75, 0xc5, 0xfd, 0xd7, 0x49, 0x61, 0xe6, 0xca, 0xfe, 0x55, 0x83, 0xe2, 0x13, 0x4c,
+	0xc7, 0x2f, 0xcc, 0x41, 0x27, 0xb2, 0x7a, 0x89, 0x8e, 0x25, 0x13, 0xa6, 0xb6, 0xb4, 0x40, 0xf7,
+	0x91, 0x0b, 0xa4, 0xe1, 0x79, 0xde, 0x17, 0x57, 0x34, 0xdc, 0x91, 0x77, 0xee, 0x32, 0x31, 0x0a,
+	0xcd, 0xde, 0x8b, 0x6e, 0x0a, 0xa1, 0x0d, 0x20, 0x99, 0x7d, 0x0c, 0xfb, 0x84, 0x41, 0xc4, 0xd4,
+	0x35, 0x96, 0x5c, 0xf5, 0xbd, 0xfd, 0x57, 0x11, 0x0a, 0xad, 0xf6, 0x21, 0x79, 0x0c, 0x70, 0xc0,
+	0x64, 0xf2, 0xe6, 0xdd, 0x9a, 0xcb, 0xc9, 0x1e, 0xbe, 0xc8, 0x6b, 0x2b, 0x4e, 0xfa, 0xa1, 0x4d,
+	0x73, 0xe4, 0x53, 0x28, 0x9e, 0x0e, 0xfb, 0xb1, 0xe7, 0xb3, 0x4b, 0xd7, 0x5c, 0x82, 0xd3, 0x1c,
+	0x79, 0x82, 0xa4, 0x13, 0x72, 0xcf, 0x7f, 0x83, 0xb5, 0x9f, 0x43, 0x25, 0x3d, 0x75, 0xc8, 0xa6,
+	0x73, 0xc1, 0x10, 0xba, 0x62, 0xfd, 0x36, 0x2c, 0xe0, 0x20, 0xbd, 0xd4, 0x73, 0xd5, 0xc9, 0x4c,
+	0x5b, 0x9a, 0x23, 0xef, 0x01, 0x98, 0x41, 0x15, 0xf5, 0x38, 0xa9, 0x3a, 0x99, 0xa9, 0x55, 0x4b,
+	0x0a, 0x80, 0xe6, 0xc8, 0x7d, 0x7c, 0xdf, 0x9a, 0x79, 0x45, 0x12, 0xbc, 0xb6, 0xe6, 0xcc, 0x0e,
+	0x31, 0x9a, 0x23, 0x1f, 0x40, 0x25, 0x4d, 0xfd, 0x53, 0x5b, 0xe2, 0xcc, 0x8d, 0x04, 0x95, 0xb2,
+	0x8a, 0xa6, 0x19, 0x63, 0x3e, 0x1f, 0xc4, 0xe5, 0x47, 0x7e, 0x0a, 0x6b, 0x99, 0x41, 0x73, 0xc1,
+	0xf2, 0x1b, 0xce, 0x45, 0xc3, 0x88, 0xe6, 0xc8, 0x33, 0x58, 0x9f, 0x9b, 0x1e, 0xe4, 0xa6, 0x73,
+	0xd9, 0x44, 0xb9, 0x22, 0x8e, 0x47, 0x00, 0x53, 0xba, 0x26, 0x64, 0x7e, 0x12, 0xd4, 0xaa, 0x4e,
+	0x86, 0xcf, 0x69, 0x8e, 0x3c, 0x84, 0xd2, 0x84, 0x76, 0xc8, 0xba, 0x93, 0x25, 0xd0, 0xda, 0x5a,
+	0x86, 0x95, 0x68, 0x8e, 0x7c, 0x02, 0xe5, 0x54, 0xd3, 0x92, 0x0d, 0x67, 0x9e, 0x58, 0x6a, 0xeb,
+	0x4e, 0xb6, 0xaf, 0x69, 0x8e, 0xec, 0xc0, 0xc2, 0x49, 0x10, 0xf5, 0xdf, 0xa0, 0x2c, 0x3f, 0x83,
+	0x95, 0x99, 0xc6, 0x23, 0x98, 0xcf, 0xf9, 0x86, 0xae, 0x6d, 0x38, 0xf3, 0xfd, 0x49, 0x73, 0xe4,
+	0x7d, 0x28, 0xab, 0xe7, 0x97, 0x89, 0x78, 0xc5, 0x49, 0xff, 0x35, 0xd6, 0xca, 0xce, 0xf4, 0x6d,
+	0x46, 0x73, 0x2f, 0x97, 0x94, 0xf7, 0x8f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xae, 0x97,
+	0x9a, 0x49, 0x0f, 0x00, 0x00,
 }
 
 // Reference imports to suppress errors if they are not otherwise used.
 var _ context.Context
-var _ grpc.ClientConn
+var _ grpc.ClientConnInterface
 
 // This is a compile-time assertion to ensure that this generated file
 // is compatible with the grpc package it is being compiled against.
-const _ = grpc.SupportPackageIsVersion4
+const _ = grpc.SupportPackageIsVersion6
 
 // CLIClient is the client API for CLI service.
 //
@@ -1367,6 +1427,7 @@ type CLIClient interface {
 	AddMirror(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*AddMirrorReply, error)
 	UpdateMirror(ctx context.Context, in *Mirror, opts ...grpc.CallOption) (*UpdateMirrorReply, error)
 	RemoveMirror(ctx context.Context, in *MirrorIDRequest, opts ...grpc.CallOption) (*empty.Empty, error)
+	GeoUpdateMirror(ctx context.Context, in *MirrorIDRequest, opts ...grpc.CallOption) (*GeoUpdateMirrorReply, error)
 	RefreshRepository(ctx context.Context, in *RefreshRepositoryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
 	ScanMirror(ctx context.Context, in *ScanMirrorRequest, opts ...grpc.CallOption) (*ScanMirrorReply, error)
 	StatsFile(ctx context.Context, in *StatsFileRequest, opts ...grpc.CallOption) (*StatsFileReply, error)
@@ -1378,10 +1439,10 @@ type CLIClient interface {
 }
 
 type cLIClient struct {
-	cc *grpc.ClientConn
+	cc grpc.ClientConnInterface
 }
 
-func NewCLIClient(cc *grpc.ClientConn) CLIClient {
+func NewCLIClient(cc grpc.ClientConnInterface) CLIClient {
 	return &cLIClient{cc}
 }
 
@@ -1466,6 +1527,15 @@ func (c *cLIClient) RemoveMirror(ctx context.Context, in *MirrorIDRequest, opts
 	return out, nil
 }
 
+func (c *cLIClient) GeoUpdateMirror(ctx context.Context, in *MirrorIDRequest, opts ...grpc.CallOption) (*GeoUpdateMirrorReply, error) {
+	out := new(GeoUpdateMirrorReply)
+	err := c.cc.Invoke(ctx, "/CLI/GeoUpdateMirror", in, out, opts...)
+	if err != nil {
+		return nil, err
+	}
+	return out, nil
+}
+
 func (c *cLIClient) RefreshRepository(ctx context.Context, in *RefreshRepositoryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
 	out := new(empty.Empty)
 	err := c.cc.Invoke(ctx, "/CLI/RefreshRepository", in, out, opts...)
@@ -1540,6 +1610,7 @@ type CLIServer interface {
 	AddMirror(context.Context, *Mirror) (*AddMirrorReply, error)
 	UpdateMirror(context.Context, *Mirror) (*UpdateMirrorReply, error)
 	RemoveMirror(context.Context, *MirrorIDRequest) (*empty.Empty, error)
+	GeoUpdateMirror(context.Context, *MirrorIDRequest) (*GeoUpdateMirrorReply, error)
 	RefreshRepository(context.Context, *RefreshRepositoryRequest) (*empty.Empty, error)
 	ScanMirror(context.Context, *ScanMirrorRequest) (*ScanMirrorReply, error)
 	StatsFile(context.Context, *StatsFileRequest) (*StatsFileReply, error)
@@ -1581,6 +1652,9 @@ func (*UnimplementedCLIServer) UpdateMirror(ctx context.Context, req *Mirror) (*
 func (*UnimplementedCLIServer) RemoveMirror(ctx context.Context, req *MirrorIDRequest) (*empty.Empty, error) {
 	return nil, status.Errorf(codes.Unimplemented, "method RemoveMirror not implemented")
 }
+func (*UnimplementedCLIServer) GeoUpdateMirror(ctx context.Context, req *MirrorIDRequest) (*GeoUpdateMirrorReply, error) {
+	return nil, status.Errorf(codes.Unimplemented, "method GeoUpdateMirror not implemented")
+}
 func (*UnimplementedCLIServer) RefreshRepository(ctx context.Context, req *RefreshRepositoryRequest) (*empty.Empty, error) {
 	return nil, status.Errorf(codes.Unimplemented, "method RefreshRepository not implemented")
 }
@@ -1769,6 +1843,24 @@ func _CLI_RemoveMirror_Handler(srv interface{}, ctx context.Context, dec func(in
 	return interceptor(ctx, in, info, handler)
 }
 
+func _CLI_GeoUpdateMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
+	in := new(MirrorIDRequest)
+	if err := dec(in); err != nil {
+		return nil, err
+	}
+	if interceptor == nil {
+		return srv.(CLIServer).GeoUpdateMirror(ctx, in)
+	}
+	info := &grpc.UnaryServerInfo{
+		Server:     srv,
+		FullMethod: "/CLI/GeoUpdateMirror",
+	}
+	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
+		return srv.(CLIServer).GeoUpdateMirror(ctx, req.(*MirrorIDRequest))
+	}
+	return interceptor(ctx, in, info, handler)
+}
+
 func _CLI_RefreshRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
 	in := new(RefreshRepositoryRequest)
 	if err := dec(in); err != nil {
@@ -1935,6 +2027,10 @@ var _CLI_serviceDesc = grpc.ServiceDesc{
 			MethodName: "RemoveMirror",
 			Handler:    _CLI_RemoveMirror_Handler,
 		},
+		{
+			MethodName: "GeoUpdateMirror",
+			Handler:    _CLI_GeoUpdateMirror_Handler,
+		},
 		{
 			MethodName: "RefreshRepository",
 			Handler:    _CLI_RefreshRepository_Handler,
diff --git a/rpc/rpc.proto b/rpc/rpc.proto
index fed9eb3..ca75e75 100644
--- a/rpc/rpc.proto
+++ b/rpc/rpc.proto
@@ -13,6 +13,7 @@ service CLI {
     rpc AddMirror (Mirror) returns (AddMirrorReply) {}
     rpc UpdateMirror (Mirror) returns (UpdateMirrorReply) {}
     rpc RemoveMirror (MirrorIDRequest) returns (google.protobuf.Empty) {}
+    rpc GeoUpdateMirror (MirrorIDRequest) returns (GeoUpdateMirrorReply) {}
     rpc RefreshRepository (RefreshRepositoryRequest) returns (google.protobuf.Empty) {}
     rpc ScanMirror (ScanMirrorRequest) returns (ScanMirrorReply) {}
     rpc StatsFile (StatsFileRequest) returns (StatsFileReply) {}
@@ -105,6 +106,12 @@ message UpdateMirrorReply {
     string Diff = 1;
 }
 
+message GeoUpdateMirrorReply {
+    Mirror Mirror = 1;
+    string Diff = 2;
+    repeated string Warnings = 3;
+}
+
 message RefreshRepositoryRequest {
     bool Rehash = 1;
 }
@@ -157,4 +164,4 @@ message GetMirrorLogsRequest {
 
 message GetMirrorLogsReply {
     repeated string line = 1;
-}
\ No newline at end of file
+}
